import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import toast from 'react-hot-toast'
import { UserIcon, LockClosedIcon, EnvelopeIcon, ShieldCheckIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline'
import { adminsAPI } from '../../../services/api'
import BackButton from '../../../components/BackButton'

const CreateAdmin = () => {
  const navigate = useNavigate()
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState({
    name: '',
    email: ''
    // password removed - auto-generated by backend
  })
  const [errors, setErrors] = useState({})

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  const validateForm = () => {
    const newErrors = {}

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required'
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required'
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid'
    }

    // Password validation removed - auto-generated by backend

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) {
      return
    }

    setLoading(true)
    try {
      const adminData = {
        name: formData.name.trim(),
        email: formData.email.trim().toLowerCase()
        // password removed - auto-generated by backend
      }

      const response = await adminsAPI.createAdmin(adminData)

      // Check if email was sent successfully
      if (response.data.emailSent) {
        toast.success('Admin created successfully! Auto-generated password sent to email.')
        if (response.data.emailPreviewUrl) {
          console.log('Email preview URL:', response.data.emailPreviewUrl)
        }
      } else {
        toast.success('Admin created successfully!')
        toast.error('Failed to send welcome email with auto-generated password. Please contact the admin manually.')
        if (response.data.emailMessage) {
          console.warn('Email error:', response.data.emailMessage)
        }
      }

      navigate('/admin/admins')
    } catch (error) {
      console.error('Error creating admin:', error)
      const message = error.response?.data?.message || 'Failed to create admin'
      toast.error(message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="space-y-6">
      {/* Back Button */}
      <div className="flex items-center">
        <BackButton />
      </div>

      {/* Header */}
      <div className="text-center">
        <div className="mx-auto w-16 h-16 bg-gradient-to-br from-cadd-red to-cadd-pink rounded-full flex items-center justify-center mb-4">
          <ShieldCheckIcon className="h-8 w-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold text-gray-900">Create New Admin</h1>
        <p className="mt-2 text-sm text-gray-600">
          Add a new administrator with full system access
        </p>
      </div>

      {/* Form */}
      <div className="max-w-md mx-auto">
        <div className="bg-white shadow-xl rounded-2xl overflow-hidden border border-gray-100">
          <div className="px-6 py-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name Field */}
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                  Full Name
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <UserIcon className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="name"
                    name="name"
                    type="text"
                    value={formData.name}
                    onChange={handleChange}
                    className={`block w-full pl-10 pr-3 py-3 border rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cadd-red focus:border-cadd-red transition-all duration-300 ${
                      errors.name ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Enter admin's full name"
                  />
                </div>
                {errors.name && (
                  <p className="mt-1 text-sm text-red-600">{errors.name}</p>
                )}
              </div>

              {/* Email Field */}
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <EnvelopeIcon className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="email"
                    name="email"
                    type="email"
                    value={formData.email}
                    onChange={handleChange}
                    className={`block w-full pl-10 pr-3 py-3 border rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cadd-red focus:border-cadd-red transition-all duration-300 ${
                      errors.email ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="admin@caddcentre.com"
                  />
                </div>
                {errors.email && (
                  <p className="mt-1 text-sm text-red-600">{errors.email}</p>
                )}
              </div>

              {/* Password Auto-Generation Info */}
              <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
                <div className="flex items-start space-x-3">
                  <LockClosedIcon className="h-6 w-6 text-blue-600 mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium text-blue-900 mb-2">Automatic Password Generation</h4>
                    <p className="text-sm text-blue-700 mb-3">
                      A secure admin password will be automatically generated and sent to the admin's email address.
                    </p>
                    <ul className="text-xs text-blue-600 space-y-1">
                      <li>• Format: Admin@FirstName + 4 digits</li>
                      <li>• Example: Admin@John3028</li>
                      <li>• Easy to remember and secure</li>
                      <li>• Sent via welcome email</li>
                      <li>• Admin can change it after first login</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* Submit Button */}
              <div className="pt-4">
                <button
                  type="submit"
                  disabled={loading}
                  className="w-full flex justify-center py-3 px-4 border border-transparent rounded-xl shadow-sm text-sm font-medium text-white bg-gradient-to-r from-cadd-red to-cadd-pink hover:from-cadd-red/90 hover:to-cadd-pink/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cadd-red disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105"
                >
                  {loading ? (
                    <div className="flex items-center">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Creating Admin...
                    </div>
                  ) : (
                    <div className="flex items-center">
                      <ShieldCheckIcon className="h-4 w-4 mr-2" />
                      Create Admin
                    </div>
                  )}
                </button>
              </div>
            </form>
          </div>

          {/* Info Section */}
          <div className="px-6 py-4 bg-gray-50 border-t border-gray-100">
            <div className="text-center">
              <p className="text-xs text-gray-500">
                Admin will have full system access and management permissions
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default CreateAdmin
